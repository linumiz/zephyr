/*
 * Copyright (c) 2020 Linumiz
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef ZEPHYR_DRIVERS_SENSOR_BATTERY_BQ34110_H_
#define ZEPHYR_DRIVERS_SENSOR_BATTERY_BQ34110_H_

#include <device.h>
#include <sys/util.h>
#include <logging/log.h>
#include <drivers/gpio.h>
LOG_MODULE_REGISTER(bq34110, CONFIG_SENSOR_LOG_LEVEL);

typedef enum {
	CONTROL_STATUS = 0x0000,
	SUB_DEVICE_TYPE = 0x0001,
	FW_VERSION = 0x0002,
	HW_VERSION = 0x0003,
	IF_SUM = 0x0004,
	STATIC_DF_SUM = 0x0005,
	PREV_MACWRITE = 0x0007,
	BOARD_OFFSET = 0x0009,
	SUB_CC_OFFSET = 0x000A,
	CC_OOFSET_SAVE = 0x000B,
	ALL_DF_SUM = 0x0010,
	SET_SNOOZE = 0x0013,
	CLEAR_SNOOZE = 0x0014,
	ACCUM_DSG_EN = 0x001E,
	ACCUM_CHG_EN = 0x001F,
	IGNORE_SELFDSG_EN = 0x0020,
	EOS_EN = 0x0021,
	PIN_CONTROL_EN = 0x0020,
	LIFETIME_EN = 0x0023,
	WHR_EN = 0x0024,
	CAL_TOOGLE = 0x002D,
	SEAL = 0x0030,
	ENTER_ROM = 0x0033,
	SECURITY_KEYS = 0x0035,
	AUTHENTICATION_KEY = 0x0037,
	EOS_START_LEARN = 0x0039,
	EOS_ABORT_LEARN = 0x003A,
	EOS_RCELL_RRATE_LEARN = 0x003B,
	EOS_WARNCLR = 0x003C,
	EOS_INITIAL_RCELL = 0x003E,
	EOS_INITIAL_RRATE = 0x003F,
	RESET = 0x0041,
	EOS_LOAD_ON = 0x0044,
	EOS_LOAD_OFF = 0x0045,
	SUB_DEVICE_NAME = 0x004A,
	ACCUM_RESET = 0x004B,
	SUB_EOS_SAFETY_STATUS = 0x0051,
	SUB_OPERATION_STATUS = 0x0054,
	GAUGING_STATUS = 0x0056,
	MANUFACTURING_STATUS = 0x0057,
	ALERT1_STATUS = 0x005E,
	ALERT2_STATUS = 0x005F,
	LT_DATA = 0x0060,
	PIN_ALERT1_SET = 0x0068,
	PIN_ALERT1_RESET = 0x0069,
	PIN_ALERT2_SET = 0x006A,
	PIN_ALERT2_RESET = 0x006B,
	PIN_VEN_SET = 0x006C,
	PIN_VEN_RESET = 0x006D,
	PIN_LEN_SET = 0x006E,
	PIN_LEN_RESET = 0x006F,
	MANU_DATA = 0x0070,
	EOS_STATUS1 = 0x007A,
	EOS_STATUS2 = 0x007B,
	STORE_REMCAP_A = 0x22C1,
	STORE_REMCAP_B = 0x28A0,
} Control_SubCommands_t;

typedef enum {
	CONTROL = 0x00,
	TEMPERATURE = 0x06,
	VOLTAGE = 0x08,
	BATTERY_STATUS = 0x0A,
	CURRENT = 0x0C,
	REMAINING_CAPACITY = 0x10,
	FULL_CHARGE_CAPACITY = 0x12,
	AVERAGE_CURRENT = 0x14,
	TIME_TO_EMPTY = 0x16,
	TIME_TO_FULL = 0x18,
	AVERAGE_POWER = 0x24,
	INTERNAL_TEMPERATURE = 0x28,
	CMD_CYCLE_COUNT = 0x2A,
	RELATIVE_STATE_OF_CHARGE = 0x2C,
	STATE_OF_HEALTH = 0x2E,
	CHARGING_VOLTAGE = 0x30,
	CHARGING_CURRENT = 0x32,
	BLT_DISCHARGE_SET = 0x34,
	BLT_CHARGE_SET = 0x36,
	OPERATION_STATUS = 0x3A,
	DESIGN_CAPACITY = 0x3C,
	MANUFACTURER_ACCESS_CONTROL = 0x3E,
	MAC_DATA = 0x40,
	MAC_DATA_SUM = 0x60,
	MAC_DATALEN = 0x61,
	EOS_LEARN_STATUS = 0x64,
	EOS_SAFETY_STATUS = 0x66,
	EOS_STATUS = 0x68,
	ANALOG_COUNT = 0x79,
	RAW_CURRENT = 0x7A,
	RAW_VOLTAGE = 0x7C,
	RAW_INT_TEMP = 0x7E,
	RAW_EXT_TEMP = 0x80,
} Commands_t;

typedef enum {
	CC_GAIN = 0x4000,
	CC_DELTA = 0x4004,
	CC_OFFSET = 0x4008,
	BROAD_OFFSET = 0x400C,
	INT_TEMP_OFFSET = 0x400D,
	EXT_TEMP_OFFSET = 0x400E,
	PACK_V_OFFSET = 0x400F,
	VOLTAGE_DIVIDER = 0x4010,
	INT_COEFF_1 = 0x41C1,
	INT_COEFF_2 = 0x41C3,
	INT_COEFF_3 = 0x41C5,
	INT_COEFF_4 = 0x41C7,
	INT_MIN_AD = 0x41C9,
	EXT_COEFF_1 = 0x41CD,
	EXT_COEFF_2 = 0x41CF,
	EXT_COEFF_3 = 0x41D1,
	EXT_COEFF_4 = 0x41D3,
	EXT_MIN_AD = 0x41D5,
	VCOMP_COEFF_1 = 0x41D7,
	VCOMP_COEFF_2 = 0x41D9,
	VCOMP_COEFF_3 = 0x41DB,
	VCOMP_COEFF_4 = 0x41DD,
	VCOM_INPUT_MULTIPLIER = 0x41DF,
	VCOM_OUTPUT_DIVISOR = 0x41E0,
	FILTER = 0x41E2,
	DEADBAND = 0x41E3,
	CC_DEADBAND = 0x41E4,
} Calibration_t;

typedef enum {
	CHG_INHIBIT_TEMP_LOW = 0x4100,
	CHG_INHIBIT_TEMP_HIGH = 0x4102,
	TEMP_HSY = 0x4104,
	T1_TEMP = 0x4106,
	T2_TEMP = 0x4108,
	T3_TEMP = 0x410A,
	T4_TEMP = 0x410C,
	CHARGE_CURRENT_T1T2 = 0x410E,
	CHARGE_CURRENT_T2T3 = 0x4110,
	CHARGE_CURRENT_T3T4 = 0x4112,
	CHARGE_VOLTAGE_T1T2 = 0x4114,
	CHARGE_VOLTAGE_T2T3 = 0x4116,
	CHARGE_VOLTAGE_T3T4 = 0x4118,
	MAINTENANCE_CURRENT = 0x411A,
	TAPER_CURRENT = 0x411C,
	MINIMUM_TAPER_CAPACITY = 0x411E,
	TAPER_VOLTAGE = 0x4120,
	CURRENT_TAPER_WINDOW = 0x4122,
	MAX_CHARGE_VOLTAGE = 0x4123,
	WHR_CV_STEP = 0x4125,
	WHR_TERMINATION_CAPACITY = 0x4127,
	FC_WHR_CLEAR = 0x4129,
	DELTA_TEMPERATURE = 0x412B,
	DELTA_TEMPERATURE_TIME = 0x412D,
	HOLDOFF_TIME = 0x412F,
	HOLDOFF_CURRRENT = 0x4131,
	HOLDOFF_TEMPERATURE = 0x4133,
	CELL_NEGATIVE_DELTA_VOLTAGE = 0x4135,
	CELL_NEGATIVE_DELTA_TIME = 0x4137,
	CELL_NEGATIVE_DELTA_QUAL_VOLATGE = 0x4138,
	LAST_CHARGE_VOLTAGE_T1T2 = 0x40C7,
	LAST_CHARGE_VOLTAGE_T2T3 = 0x40C9,
	LAST_CHARGE_VOLTAGE_T3T4 = 0x40CB,
	CHARGE_VOLTAGE_LEVELA = 0x4197,
	CHARGE_VOLTAGE_LEVELB = 0x4199,
	CHARGE_VOLTAGE_LEVELC = 0x419B,
	CHARGE_VOLTAGE_LEVELD = 0x419D,
	CHARGE_VOLTAGE_LEVELE = 0x419F,
	CHARGE_VOLTAGE_LEVELF = 0x41A1,
	CHARGE_VOLTAGE_LEVELG = 0x41A3,
	CHARGE_VOLTAGE_LEVELH = 0x41A5,
} Charger_Control_t;

typedef enum {
	PIN_CONTROL_CONFIG = 0x413D,
	ALERT1_0_CONFIG = 0x413E,
	ALERT1_1_CONFIG = 0x413F,
	ALERT1_2_CONFIG = 0x4140,
	ALERT1_3_CONFIG = 0x4141,
	ALERT1_4_CONFIG = 0x4142,
	ALERT1_5_CONFIG = 0x4143,
	ALERT1_6_CONFIG = 0x4144,
	ALERT2_0_CONFIG = 0x4145,
	ALERT2_1_CONFIG = 0x4146,
	ALERT2_2_CONFIG = 0x4147,
	ALERT2_3_CONFIG = 0x4148,
	ALERT2_4_CONFIG = 0x4149,
	ALERT2_5_CONFIG = 0x414A,
	ALERT2_6_CONFIG = 0x414B,
	DIRECT_CHARGE_PIN_CONTROL = 0x4195,
	CHARGE_LEVEL_PIN_CONTROL = 0x4196,
	SOC_FLAG_CONFIG_A = 0x41FD,
	SOC_FLAG_CONFIG_B = 0x41FF,
	EOS_CONFIGURATION = 0x4218,
	CEDV_GAUGING_CONFIGURATION = 0x424B,
	INIT_DISCHARGE_SET = 0x414D,
	INIT_CHARGE_SET = 0x414F,
	ACCUM_CHARGE_POSITIVE_THRESHOLD = 0x416C,
	ACCUM_CHARGE_NEGATIVE_THRESHOLD = 0x416E,
	MFG_STATUS_INIT = 0x40D7,
} Settings_t;

typedef enum {
	OT_CHG = 0x4170,
	OT_CHG_TIME = 0x4172,
	OT_CHG_RECOVERY = 0x4173,
	OT_DSG = 0x4175,
	OT_DSG_TIME = 0x4177,
	OT_DSG_RECOVERY = 0x4178,
	UT_CHG = 0x417A,
	UT_CHG_TIME = 0x417C,
	UT_CHG_RECOVERY = 0x417D,
	UT_DSG = 0x417F,
	UT_DSG_TIME = 0x4181,
	UT_DSG_RECOVERY = 0x4182,
	BATTERY_LOW_SET_THRESHOLD = 0x4184,
	BATTERY_LOW_TIME = 0x4186,
	BATTERY_LOW_CLEAR_THRESHOLD = 0x4187,
	BATTERY_HIGH_SET_THRESHOLD = 0x4189,
	BATTERY_HIGH_TIME = 0x418B,
	BATTERY_HIGH_CLEAR_THRESHOLD = 0x418C,
	SOC_LOW_THRESHOLD = 0x418E,
	SOC_LOW_RECOVERY = 0x418F,
} Safety_t;

typedef enum {
	OPERATION_CONFIG_A = 0x413A,
	DEVICE_TYPE = 0x4151,
	NUMBER_OF_SERIES_CELLS = 0x4155,
	FLASH_UPDATE_OK_UPDATE = 0x4157,
	SLEEP_CURRENT = 0x4159,
	BUS_LOW_TIME = 0x415B,
	OFFSET_CAL_INHIBIT_TEMP_LOW = 0x415C,
	OFFSET_CAL_INHIBIT_TEMP_HIGH = 0x415E,
	SLEEP_VOLTAGE_TIME = 0x4160,
	SLEEP_CURRENT_TIME = 0x4161,
	DISCHARGE_DETECTION_THRESHOLD = 0x4162,
	CHARGE_DETECTION_THRESHOLD = 0x4164,
	QUIT_CURRENT = 0x4166,
	DISCHARGE_RELAX_TIME = 0x4168,
	CHARGE_RELAX_TIME = 0x416A,
	QUIT_RELAX_TIME = 0x416B,
	DEVICE_NAME = 0x406A,
	DATA_FLASH_VERSION = 0x4073,
	SERIAL_NUMBER = 0x4075,
	MANUFACTURE_DATE = 0x4077,
	DEFAULT_TEMPERATURE = 0x41A7,
	DF_STATIC_CHECKSUM = 0x4062,
	ALL_DF_CHECKSUM = 0x4064,
	IF_CHECKSUM = 0x4066,
	FULL_RESET_COUNTER = 0x40D4,
	RESET_COUNTER_WD = 0x40D5,
} Configuration_t;

typedef enum {
	MANUFACTURER_INFO_BLOCK_A01 = 0x4042,
	MANUFACTURER_INFO_BLOCK_A02 = 0x4043,
	MANUFACTURER_INFO_BLOCK_A03 = 0x4044,
	MANUFACTURER_INFO_BLOCK_A04 = 0x4045,
	MANUFACTURER_INFO_BLOCK_A05 = 0x4046,
	MANUFACTURER_INFO_BLOCK_A06 = 0x4047,
	MANUFACTURER_INFO_BLOCK_A07 = 0x4048,
	MANUFACTURER_INFO_BLOCK_A08 = 0x4049,
	MANUFACTURER_INFO_BLOCK_A09 = 0x404A,
	MANUFACTURER_INFO_BLOCK_A10 = 0x404B,
	MANUFACTURER_INFO_BLOCK_A11 = 0x404C,
	MANUFACTURER_INFO_BLOCK_A12 = 0x404D,
	MANUFACTURER_INFO_BLOCK_A13 = 0x404E,
	MANUFACTURER_INFO_BLOCK_A14 = 0x404F,
	MANUFACTURER_INFO_BLOCK_A15 = 0x4050,
	MANUFACTURER_INFO_BLOCK_A16 = 0x4051,
	MANUFACTURER_INFO_BLOCK_A17 = 0x4052,
	MANUFACTURER_INFO_BLOCK_A18 = 0x4053,
	MANUFACTURER_INFO_BLOCK_A19 = 0x4054,
	MANUFACTURER_INFO_BLOCK_A20 = 0x4055,
	MANUFACTURER_INFO_BLOCK_A21 = 0x4056,
	MANUFACTURER_INFO_BLOCK_A22 = 0x4057,
	MANUFACTURER_INFO_BLOCK_A23 = 0x4058,
	MANUFACTURER_INFO_BLOCK_A24 = 0x4059,
	MANUFACTURER_INFO_BLOCK_A25 = 0x405A,
	MANUFACTURER_INFO_BLOCK_A26 = 0x405B,
	MANUFACTURER_INFO_BLOCK_A27 = 0x405C,
	MANUFACTURER_INFO_BLOCK_A28 = 0x405D,
	MANUFACTURER_INFO_BLOCK_A29 = 0x405E,
	MANUFACTURER_INFO_BLOCK_A30 = 0x405F,
	MANUFACTURER_INFO_BLOCK_A31 = 0x4060,
	MANUFACTURER_INFO_BLOCK_A32 = 0x4061,
} System_Data_t;

typedef enum {
	TEMPERATURE_RESOLUTION = 0x4190,
	CURRENT_RESOLUTION = 0x4191,
	VOLTAGE_RESOLUTION = 0x4192,
	MAX_TEMPERATURE = 0x4080,
	MIN_TEMPERATURE = 0x4081,
	MAX_CHARGE_CURRENT = 0x4084,
	MAX_DISCHARGE_CURRENT = 0x4086,
	MAX_PACK_VOLTAGE = 0x4088,
	MIN_PACK_VOLTAGE = 0x408A,
} Lifetimes_t;

typedef enum {
	DESIGN_CAPACITY_MAH = 0x41F5,
	EMF = 0x424D,
	C0 = 0x424F,
	R0 = 0x4251,
	T0 = 0x4253,
	R1 = 0x4255,
	TC = 0x4257,
	C1 = 0x4258,
	AGE_FACTOR = 0x4259,
	FIXED_EDV_0 = 0x425A,
	EDV_0_HOLD_TIME = 0x425C,
	FIXED_EDV_1 = 0x425D,
	EDV1_HOLD_TIME = 0x425F,
	FIXED_EDV_2 = 0x4260,
	EDV2_HOLD_TIME = 0x4262,
	VOLTAGE_0PERCENT_DOD = 0x4263,
	VOLTAGE_10PERCENT_DOD = 0x4265,
	VOLTAGE_20PERCENT_DOD = 0x4267,
	VOLTAGE_30PERCENT_DOD = 0x4269,
	VOLTAGE_40PERCENT_DOD = 0x426B,
	VOLTAGE_50PERCENT_DOD = 0x426D,
	VOLTAGE_60PERCENT_DOD = 0x426F,
	VOLTAGE_70PERCENT_DOD = 0x4271,
	VOLTAGE_80PERCENT_DOD = 0x4273,
	VOLTAGE_90PERCENT_DOD = 0x4275,
	VOLTAGE_100PERCENT_DOD = 0x4277,
	DESIGN_VOLTAGE = 0x41F9,
	CYCLE_COUNT_PERCENTAGE = 0x41FB,
	FD_SET_VOLTAGE_THRESHOLD = 0x4200,
	FD_CLEAR_VOLTAGE_THRESHOLD = 0x4202,
	FD_SET_PERCENT_RSOC_THRESHOLD = 0x4204,
	FD_CLEAR_PERCENT_RSOC_THRESHOLD = 0x4205,
	FC_SET_VOLTAGE_THRESHOLD = 0x4206,
	FC_CLEAR_VOLTAGE_THRESHOLD = 0x4208,
	FC_SET_PERCENT_RSOC_THRESHOLD = 0x420A,
	FC_CLEAR_PERCENT_RSOC_THRESHOLD = 0x420B,
	TD_SET_VOLTAGE_THRESHOLD = 0x420C,
	TD_CLEAR_VOLTAGE_THRESHOLD = 0x420E,
	TD_SET_PERCENT_RSOC_THRESHOLD = 0x4210,
	TD_CLEAR_PERCENT_RSOC_THRESHOLD = 0x4211,
	TC_SET_VOLTAGE_THRESHOLD = 0x4212,
	TC_CLEAR_VOLTAGE_THRESHOLD = 0x4214,
	TC_SET_PERCENT_RSOC_THRESHOLD = 0x4216,
	TC_CLEAR_PERCENT_RSOC_THRESHOLD = 0x4217,
	LEARNED_FULL_CHARGE_CAPACITY = 0x40C0,
	STORED_REMAINING_CAPACITY = 0x40C2,
	CYCLE_COUNT = 0x40C5,
	BATTERY_LOW_PERCENT = 0x427D,
	LEARNING_LOW_TEMP = 0x4288,
	OVERLOAD_CURRENT = 0x4291,
	SELF_DISCHARGE_RATE = 0x4295,
	ELECTRONICS_LOAD = 0x4296,
	NEAR_FULL = 0x4298,
	RESERVE_CAPACITY = 0x429A,
	CHG_EFF = 0x429C,
	DSG_EFF = 0x429D,
	REMCAP_INIT_PERCENT = 0x429E,
	SMOOTHING_CONFIG = 0x429F,
	SMOOTHING_START_VOLTAGE = 0x42A0,
	SMOOTHING_DELTA_VOLTAGE = 0x42A2,
	MAX_SMOOTHING_CURRENT = 0x42A4,
	EOC_SMOOTH_CURRENT = 0x42A9,
	EOC_SMOOTH_CURRENT_TIME = 0x42AA,
} GasGauging_t;

typedef enum {
	AUTO_LEARN_TIME = 0x4219,
	AUTO_LEARN_RETRY_TIME = 0x421B,
	MINIMUM_LEARN_TIME = 0x421C,
	ALERTWARN_LEARN_TIME = 0x421E,
	INITIAL_LEARN_PULSE_NUMBER = 0x4220,
	LEARN_CHARGE_VOLTAGE_DELTA = 0x4221,
	LEARN_CHARGE_TIME_LIMIT = 0x4223,
	LEARN_DISCHARGE_CURRENT = 0x4225,
	LEARN_DISCHARGE_CURRENT_BOUNDARY = 0x4227,
	LEARN_DISCHARGE_TIME = 0x4229,
	LEARN_REQUEST_TIMEOUT = 0x422B,
	LEARN_MIN_TEMPERATURE = 0x422C,
	LEARN_MAX_TEMPERATURE = 0x422E,
	LEARN_TARGET_TEMPERATURE = 0x4230,
	RCELL_HIGH_TEMP_COEFFICIENT = 0x4232,
	RCELL_LOW_TEMP_COEFFICIENT = 0x4234,
	INITIAL_RCELL = 0x40CD,
	INITIAL_RCELL_LEARNED = 0x40CF,
	DRD_ALERT_LEVEL = 0x4239,
	DRD_ALERT_COUNTS = 0x403B,
	DRD_WARNING_LEVEL = 0x403C,
	DRD_WARNING_COUNTS = 0x403E,
	INITIAL_RRATE = 0x40D0,
	INITIAL_RRATE_LEARNED = 0x40D2,
	RSD_ALERT_LEVEL = 0x423F,
	RSD_ALERT_COUNTS = 0x4241,
	RSD_WARNING_LEVEL = 0x4242,
	RSD_WARNING_COUNTS = 0x4244,
	RSDL_ALERT_LEVEL = 0x4245,
	RSDL_WARNING_LEVEL = 0x4247,
	WARNING_STATUS = 0x40D3,
} EndOfService_t;

#define BQ34110_DEVICE_ID	0x0110

struct rawDataAvg {
	int16_t raw_current_avg;
	uint16_t raw_voltage_avg;
	uint16_t raw_temperature_avg;
};

struct bq34110_data {
	const struct device *i2c;
	uint16_t voltage;
	int16_t avg_power;
	int16_t avg_current;
	uint16_t time_to_full;
	uint16_t time_to_empty;
	int16_t state_of_health;
	uint16_t state_of_charge;
	int16_t max_load_current;
	uint16_t nom_avail_capacity;
	uint16_t full_avail_capacity;
	uint16_t internal_temperature;
	uint16_t full_charge_capacity;
	uint16_t remaining_charge_capacity;

#ifdef CONFIG_BQ34110_TRIGGER
	const struct device *gpio;
	struct gpio_callback gpio_cb;
	const struct device *dev;

	sensor_trigger_handler_t gpio1_handler;
	struct sensor_trigger gpio1_trigger;

	sensor_trigger_handler_t gpio2_handler;
	struct sensor_trigger gpio2_trigger;

#if defined(CONFIG_BQ34110_TRIGGER_OWN_THREAD)
	K_KERNEL_STACK_MEMBER(thread_stack, CONFIG_BQ34110_THREAD_STACK_SIZE);
	struct k_sem gpio_sem;
	struct k_thread thread;
#elif defined(CONFIG_BQ34110_TRIGGER_GLOBAL_THREAD)
	struct k_work work;
#endif

#endif /* CONFIG_BQ34110_TRIGGER */
};

struct bq34110_config {
	char *bus_name;
	uint16_t taper_current;
	uint16_t design_voltage;
	uint16_t design_capacity;
	uint16_t taper_voltage;
	uint8_t no_of_series_cells;
};

#ifdef CONFIG_BQ34110_TRIGGER
int bq34110_attr_set(const struct device *dev,
		     enum sensor_channel chan,
		     enum sensor_attribute attr,
		     const struct sensor_value *val);

int bq34110_trigger_set(const struct device *dev,
			const struct sensor_trigger *trig,
			sensor_trigger_handler_t handler);
#endif

#endif
